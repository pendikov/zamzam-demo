//
//  ZZBlockPresenter.swift
//  ZamZamDemo
//
//  Created Daniil Pendikov on 10/11/2018.
//  Copyright © 2018 Daniil Pendikov. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ZZBlockPresenter: ZZBlockPresenterProtocol {

    weak private var view: ZZBlockViewProtocol?
    var interactor: ZZBlockInteractorProtocol?
    private let router: ZZBlockWireframeProtocol
    
    var block: ZZBlock?

    init(interface: ZZBlockViewProtocol, interactor: ZZBlockInteractorProtocol?, router: ZZBlockWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func start() {
        guard let block = self.block else { return }
        self.update(block: block)
    }
    
    func update(block: ZZBlock) {
        guard let reward = block.reward,
            let difficulty = block.difficulty,
            let tx = block.tx,
            let confirmations = block.confirmations else {
                return
        }
        var rows = [String]()
        rows.append("hash: \(block.hash.prefix(10))...")
        rows.append("height: \(block.height)")
        rows.append("reward: \(reward)")
        rows.append("date: \(block.date)")
        rows.append("difficulty: \(floor(difficulty))")
        rows.append("size bytes: \(block.size)")
        rows.append("number of confirmations: \(confirmations)")
        self.view?.update(rows: rows, transactions: block.tx ?? [])
    }

}
