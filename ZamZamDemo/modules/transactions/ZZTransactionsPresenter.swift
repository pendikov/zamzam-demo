//
//  ZZTransactionsPresenter.swift
//  ZamZamDemo
//
//  Created Daniil Pendikov on 09/11/2018.
//  Copyright © 2018 Daniil Pendikov. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ZZTransactionsPresenter: ZZTransactionsPresenterProtocol {

    weak private var view: ZZTransactionsViewProtocol?
    var interactor: ZZTransactionsInteractorProtocol?
    private let router: ZZTransactionsWireframeProtocol

    init(interface: ZZTransactionsViewProtocol, interactor: ZZTransactionsInteractorProtocol?, router: ZZTransactionsWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func start() {
        self.interactor?.start()
        if let trans = self.interactor?.allTransactions() {
            if trans.count > 0 {
                self.view?.reloadAll(transactions: trans)
            } else {
                self.view?.isLoading = true
            }
        }
    }
    
    func add(transaction: ZZTransaction) {
        DispatchQueue.main.async {
            self.view?.isLoading = false
            self.view?.add(transaction: transaction)
        }
    }
    
    func removeLastAndAdd(transaction: ZZTransaction) {
        DispatchQueue.main.async {
            self.view?.removeLastAndAdd(transaction: transaction)
        }
    }
    
    func show(transaction: ZZTransaction) {
        guard let blockchain = self.interactor?.blockchain else {
            log.error("\(#function) requires blockchain")
            return
        }
        self.router.show(transaction: transaction, blockchain: blockchain)
    }

}
